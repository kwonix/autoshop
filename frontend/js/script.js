// script.js - –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
class ShopApp {
    constructor() {
        this.cart = new CartManager();
        this.init();
    }

    init() {
        this.loadCategories();
        this.loadPopularProducts();
        this.setupContactForm();
        this.setupAuthCheck();
    }

    async loadCategories() {
        try {
            const categories = await Components.apiCall('/categories');
            this.renderCategories(categories);
        } catch (error) {
            console.error('Error loading categories:', error);
        }
    }

    renderCategories(categories) {
        const container = document.getElementById('categories-grid');
        if (!container) return;

        container.innerHTML = categories.map(category => `
            <div class="category-card" onclick="window.location='catalog.html?category=${category.slug}'">
                <div class="category-img" style="background-image: url('${category.image_url}')"></div>
                <div class="category-info">
                    <h3>${category.name}</h3>
                    <p>${category.description}</p>
                    <button class="btn btn-outline">–°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã</button>
                </div>
            </div>
        `).join('');
    }

    async loadPopularProducts() {
        try {
            const products = await Components.apiCall('/products/popular');
            this.renderPopularProducts(products);
        } catch (error) {
            console.error('Error loading popular products:', error);
        }
    }

    renderPopularProducts(products) {
        const container = document.getElementById('popular-products');
        if (!container) return;

        if (products.length === 0) {
            container.innerHTML = '<p class="text-center">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
            return;
        }

        container.innerHTML = products.map(product => `
            <div class="product-card">
                <div class="product-img" style="background-image: url('${product.image_url}')"></div>
                <div class="product-info">
                    <h3>${product.name}</h3>
                    <p>${product.description}</p>
                    <div class="price">${Components.formatPrice(product.price)}</div>
                    <button class="btn btn-primary" onclick="shopApp.cart.addToCart(${product.id})">
                        –í –∫–æ—Ä–∑–∏–Ω—É
                    </button>
                </div>
            </div>
        `).join('');
    }

    setupContactForm() {
        const form = document.getElementById('contact-form');
        if (!form) return;

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('contact-name').value,
                email: document.getElementById('contact-email').value,
                phone: document.getElementById('contact-phone').value,
                message: document.getElementById('contact-message').value
            };

            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;

            submitBtn.innerHTML = '<div class="loading"></div>';
            submitBtn.disabled = true;

            try {
                await Components.apiCall('/contact', {
                    method: 'POST',
                    body: formData
                });

                Components.showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                form.reset();
            } catch (error) {
                Components.showNotification(error.message, 'error');
            } finally {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            }
        });
    }

    setupAuthCheck() {
        const token = localStorage.getItem('user_token');
        if (token) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const loginBtn = document.querySelector('.login-btn');
            if (loginBtn) {
                loginBtn.textContent = 'üë§ –ö–∞–±–∏–Ω–µ—Ç';
                loginBtn.href = 'profile.html'; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
            }
        }
    }
}

class CartManager {
    constructor() {
        this.items = JSON.parse(localStorage.getItem('cart')) || [];
    }

    addToCart(productId, quantity = 1) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
        const product = this.getProductData(productId);
        if (!product) {
            Components.showNotification('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        const existingItem = this.items.find(item => item.id === productId);
        
        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            this.items.push({
                id: product.id,
                name: product.name,
                price: product.price,
                image: product.image_url,
                quantity: quantity
            });
        }

        this.saveCart();
        this.updateCartCount();
        Components.showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');
    }

    removeFromCart(productId) {
        this.items = this.items.filter(item => item.id !== productId);
        this.saveCart();
        this.updateCartCount();
        
        if (window.location.pathname.endsWith('cart.html')) {
            this.renderCart();
        }
    }

    updateQuantity(productId, newQuantity) {
        if (newQuantity < 1) {
            this.removeFromCart(productId);
            return;
        }

        const item = this.items.find(item => item.id === productId);
        if (item) {
            item.quantity = newQuantity;
            this.saveCart();
            
            if (window.location.pathname.endsWith('cart.html')) {
                this.renderCart();
            }
        }
    }

    getTotalPrice() {
        return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);
    }

    getTotalItems() {
        return this.items.reduce((total, item) => total + item.quantity, 0);
    }

    saveCart() {
        localStorage.setItem('cart', JSON.stringify(this.items));
    }

    updateCartCount() {
        const cartCountElements = document.querySelectorAll('#cart-count');
        const totalItems = this.getTotalItems();
        
        cartCountElements.forEach(element => {
            element.textContent = totalItems;
        });
    }

    async checkout(orderData) {
        try {
            const order = await Components.apiCall('/orders', {
                method: 'POST',
                body: {
                    ...orderData,
                    items: this.items,
                    total_amount: this.getTotalPrice()
                }
            });

            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            this.items = [];
            this.saveCart();
            this.updateCartCount();

            return order;
        } catch (error) {
            throw error;
        }
    }

    // –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –±—Ä–∞–ª–∏—Å—å –±—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
    getProductData(productId) {
        const productsData = {
            1: { id: 1, name: '–í–∏–¥–µ–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä 4K', price: 5990, image_url: 'https://images.unsplash.com/photo-1606144042614-b2417e99c4e3' },
            2: { id: 2, name: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–≤—Ä–∏–∫–∏', price: 3490, image_url: 'https://images.unsplash.com/photo-1570733780745-d192c48b8ff3' },
            3: { id: 3, name: '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π', price: 2790, image_url: 'https://images.unsplash.com/photo-1583121274602-3e2820c69888' },
            4: { id: 4, name: '–ù–∞–≤–∏–≥–∞—Ç–æ—Ä —Å —Ä–∞–¥–∞—Ä-–¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º', price: 8990, image_url: 'https://images.unsplash.com/photo-1558637845-c8b7ead71a3e' },
            5: { id: 5, name: '–ü–æ–ª–∏—Ä–æ–ª—å –¥–ª—è –∫—É–∑–æ–≤–∞', price: 890, image_url: 'https://images.unsplash.com/photo-1544829099-b9a0c07fad1a' },
            6: { id: 6, name: '–ß–µ—Ö–ª—ã –Ω–∞ —Å–∏–¥–µ–Ω—å—è', price: 2490, image_url: 'https://images.unsplash.com/photo-1503376780353-7e6692767b70' },
            7: { id: 7, name: '–°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º', price: 12990, image_url: 'https://images.unsplash.com/photo-1580273916550-e323be2ae537' },
            8: { id: 8, name: '–©–µ—Ç–∫–∏ —Å—Ç–µ–∫–ª–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª—è', price: 1290, image_url: 'https://images.unsplash.com/photo-1552519507-da3b142c6e3d' }
        };
        
        return productsData[productId];
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    window.shopApp = new ShopApp();
    window.CartManager = CartManager;
});